{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contributing/","title":"Development - Contributing","text":"<p>Issues and pull requests are more than welcome: github.com/developmentseed/eoAPI/issues</p> <p>dev install</p> <pre><code># Download the code\ngit clone https://github.com/developmentseed/eoAPI.git\ncd eoAPI\n\n# Create a virtual environment\npython -m pip install --upgrade virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\n\n# Install eoapi module\npython -m pip install \"psycopg[binary,pool]\"\npython -m pip install -e runtime/eoapi/raster[\"test\"] # or -e runtime/eoapi/stac[\"test\"]  | -e runtime/eoapi/vector[\"test\"]\n</code></pre> <p>Note: services might have incompatible dependencies which you can resolve by using virtual environnement per service</p> <p>pre-commit</p> <p>This repo is set to use <code>pre-commit</code> to run isort, ruff, pydocstring, black (\"uncompromising Python code formatter\") and mypy when committing new code.</p> <pre><code>$ pre-commit install\n</code></pre>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#via-eoapi-cdk","title":"Via eoapi-cdk","text":"<p>eoapi-cdk is a set of AWS CDK constructs to deploy eoAPI services.</p> <p>eoapi-template is an AWS CDK app that shows how to configure the eoapi-cdk constructs.</p> <p>An example of Cloud Stack is available for AWS (RDS for the database and Lambda for the APIs).</p> <p>The stack is deployed by the AWS CDK utility. Under the hood, CDK will create the deployment packages required for AWS Lambda, upload it to AWS, and handle the creation of the Lambda and API Gateway resources.</p> <p>The example commands here will deploy a CloudFormation stack called <code>eoAPI-staging</code>.</p> <ol> <li> <p>Clone the <code>eoapi</code> repo and install dependencies     <pre><code># Download eoapi repo\ngit clone https://github.com/developmentseed/eoapi.git\n\n# Create a virtual environment\npython -m pip install --upgrade virtualenv\nvirtualenv infrastructure/aws/.venv\nsource infrastructure/aws/.venv/bin/activate\n\n# install cdk dependencies\npython -m pip install -r infrastructure/aws/requirements-cdk.txt\n</code></pre></p> </li> <li> <p>Install node dependency - requires node version 14+     <pre><code>npm --prefix infrastructure/aws install\n</code></pre></p> </li> <li> <p>Update settings</p> <p>Set environment variable or hard code in <code>infrastructure/aws/.env</code> file (e.g <code>CDK_EOAPI_DB_PGSTAC_VERSION=0.7.1</code>).</p> <p>Important:</p> <ul> <li> <p><code>CDK_EOAPI_DB_PGSTAC_VERSION</code> is a required env (see github.com/stac-utils/pgstac/tags for the latest version)</p> </li> <li> <p>You can choose which functions to deploy by setting <code>CDK_EOAPI_FUNCTIONS</code> env (e.g <code>CDK_EOAPI_FUNCTIONS='[\"stac\",\"raster\",\"vector\"]'</code>)</p> </li> </ul> </li> <li> <p>Install CDK and connect to your AWS account. This step is only necessary once per AWS account. The environment variable <code>CDK_EOAPI_STAGE</code> determines the name of the stack (e.g. eoAPI-staging or eoAPI-production)     <pre><code># Deploy the CDK toolkit stack into an AWS environment.\nCDK_EOAPI_STAGE=staging \\\nCDK_EOAPI_DB_PGSTAC_VERSION=0.7.1 \\\nnpm --prefix infrastructure/aws run cdk -- bootstrap\n\n# or to a specific region\nAWS_DEFAULT_REGION=us-west-2 \\\nAWS_REGION=us-west-2 \\\nCDK_EOAPI_STAGE=staging \\\nCDK_EOAPI_DB_PGSTAC_VERSION=0.7.1 \\\nnpm --prefix infrastructure/aws run cdk -- bootstrap\n</code></pre></p> </li> <li> <p>Pre-Generate CFN template</p> <pre><code>CDK_EOAPI_STAGE=staging \\\nCDK_EOAPI_DB_PGSTAC_VERSION=0.7.1 \\\nnpm --prefix infrastructure/aws run cdk -- synth  # Synthesizes and prints the CloudFormation template for this stack\n</code></pre> </li> <li> <p>Deploy</p> <pre><code>CDK_EOAPI_STAGE=staging \\\nCDK_EOAPI_DB_PGSTAC_VERSION=0.7.1 \\\nnpm --prefix infrastructure/aws run cdk -- deploy eoAPI-staging\n\n# Deploy in specific region\nAWS_DEFAULT_REGION=eu-central-1 \\\nAWS_REGION=eu-central-1 \\\nCDK_EOAPI_STAGE=staging \\\nCDK_EOAPI_DB_PGSTAC_VERSION=0.7.1 \\\nnpm --prefix infrastructure/aws run cdk -- deploy eoapi-staging --profile {my-aws-profile}\n</code></pre> </li> </ol> <p>If you get an error saying that the max VPC's has been reached, this means that you have hit the limit for the amount of VPCs per unique AWS account and region combination. You can change the AWS region to a region that has less VPCs and deploy again to fix this.</p>"},{"location":"deployment/#via-eoapi-k8s","title":"Via eoapi-k8s","text":"<p>eoapi-k8s has the IaC and Helm charts for deploying eoAPI services on AWS and GCP.</p> <p>Getting started</p> <p>If you don't have a k8s cluster set up on AWS or GCP then follow an IaC guide below that is relevant to you</p> <p>\u24d8 The helm chart in this repo assumes your cluster has a few third-party add-ons and controllers installed. So it's in your best interest to read through the IaC guides to understand what those defaults are</p> <ul> <li> <p>AWS EKS Cluster Setup</p> </li> <li> <p>TBD: GCP GKE Cluster Setup</p> </li> </ul> <p>Helm Installation </p> <p>Once you have a k8s cluster set up you can <code>helm install</code> eoAPI as follows</p> <ol> <li> <p><code>helm install</code> from this repo's <code>helm-chart/</code> folder:</p> <pre><code>  ######################################################\n  # create os environment variables for required secrets\n  ######################################################\n  $ export GITSHA=$(git rev-parse HEAD | cut -c1-10)\n  $ export PGUSER=s00pers3cr3t\n  $ export POSTGRES_USER=s00pers3cr3t\n  $ export POSTGRES_PASSWORD=superuserfoobar\n  $ export PGPASSWORD=foobar\n\n  $ cd ./helm-chart\n\n  $ helm install \\\n      --namespace eoapi \\\n      --create-namespace \\\n      --set gitSha=$GITSHA \\\n      --set db.settings.secrets.PGUSER=$PGUSER \\\n      --set db.settings.secrets.POSTGRES_USER=$POSTGRES_USER \\\n      --set db.settings.secrets.PGPASSWORD=$PGPASSWORD \\\n      --set db.settings.secrets.POSTGRES_PASSWORD=$POSTGRES_PASSWORD \\\n      eoapi \\\n      ./eoapi\n</code></pre> </li> <li> <p>or <code>helm install</code> from devseed.com/eoapi-k8s/:</p> <pre><code>  # add the eoapi helm repo locally\n  $ helm repo add eoapi https://devseed.com/eoapi-k8s/\n\n  # list out the eoapi chart versions\n  $ helm search repo eoapi \n  NAME            CHART VERSION   APP VERSION     DESCRIPTION                                       \n  eoapi/eoapi     0.1.1           0.1.0           Create a full Earth Observation API with Metada...\n  eoapi/eoapi     0.1.2           0.1.0           Create a full Earth Observation API with Metada...\n\n  # add the required secret overrides to an arbitrarily named `.yaml` file (`config.yaml` below)\n  $ cat config.yaml \n  db:\n    settings:\n      secrets:\n        PGUSER: \"username\"\n        POSTGRES_USER: \"username\"\n        PGPASSWORD: \"password\"\n        POSTGRES_PASSWORD: \"password\"\n\n  # then run `helm install` with those overrides \n  helm install eoapi eoapi/eoapi --version 0.1.1 -f config.yaml\n</code></pre> </li> </ol>"},{"location":"intro/","title":"Intro","text":"<p> <p>Create a full Earth Observation API with Metadata, Raster and Vector services.</p> </p>"},{"location":"intro/#earth-observation-api","title":"Earth Observation API","text":"<p><code>eoAPI</code> combines several state-of-the-art projects to create a full Earth Observation API. Each service can be used and deployed independently but <code>eoAPI</code> creates the interconnections between each service:</p> <ul> <li> <p>pgSTAC database stac-utils/pgstac</p> </li> <li> <p>STAC API built on top of stac-utils/stac-fastapi</p> </li> <li> <p>STAC Items And Mosaic Raster Tiles API built on top of stac-utils/titiler-pgstac</p> </li> <li> <p>OGC Features and Vector Tiles API built on top of developmentseed/tipg</p> </li> </ul>"},{"location":"intro/#eoapi-an-open-source-community-project","title":"\ud83c\udf0d eoAPI: An Open-Source Community Project","text":"<p><code>eoAPI</code> is proudly open-source and driven by a dedicated community of contributors. We believe in the power of open collaboration and welcome anyone to contribute, discuss, and grow this tool with us. Join the conversations on GitHub Discussions and make a difference in the Earth Observation realm.</p>"},{"location":"intro/#why-should-you-use-eoapi","title":"Why should you use <code>eoAPI</code>","text":"<ul> <li> <p>Focus on your use case: <code>eoAPI</code>\u00a0is used for large-scale data processing, building geographic information systems (GIS), creating real-time data applications, climate research and environmental monitoring, machine learning model training, and more.</p> </li> <li> <p>Unified Repository: <code>eoAPI</code>\u00a0provides a single, unified repository to several state-of-the-art Earth Observation (EO) data services, including Metadata search (STAC), Raster, and Vector services. This can simplify the process of accessing and working with these services.</p> </li> <li> <p>Interoperability: <code>eoAPI</code>\u00a0is designed to enable interoperability among its included services. This can make building complex applications that leverage different types of EO data easier.</p> </li> <li> <p>Open Source and Community Support:\u00a0As an open-source project,\u00a0<code>eoAPI</code>\u00a0allows developers to inspect its code, contribute to its development, and use it as a base for custom solutions. It also benefits from the support and innovation of a community of developers and EO data users.</p> </li> <li> <p>Scalability and Flexibility:\u00a0Each service in\u00a0<code>eoAPI</code>\u00a0can be used or deployed independently, which provides a lot of flexibility. If a developer's application only requires one or two of eoAPI's services, they don't need to deploy the entire suite.</p> </li> <li> <p>Facilitate Earth Observation Tasks: <code>eoAPI</code>\u00a0includes specialized tools for working with EO data, such as dynamic tiling, metadata searching, and features/vector tiles API. These can significantly facilitate EO data processing, analysis, and visualization.</p> </li> <li> <p>Ease of Deployment: <code>eoAPI</code>\u00a0supports containerized deployment using Docker, making it easier to set up, scale, and maintain applications built on it. Spin up the demo locally and start experimenting in minutes.</p> </li> </ul>"},{"location":"intro/#services-overview","title":"Services Overview","text":"<ul> <li> <p>STAC Metadata: Built with stac-fastapi.pgstac and extended with a custom extension to connect it to <code>TiTiler</code> and a Search Viewer. See docs for API details.</p> </li> <li> <p>Raster Tiles: Built with titiler-pgstac and pgstac to enable large scale mosaic based on results of STAC searches queries. See docs for API details.</p> </li> <li> <p>OGC Features &amp; Vector Tiles: Built with tipg to create a lightweight OGC Features and Tiles API with a PostGIS database. See docs for API details.</p> </li> </ul> <p>See service details for more information.</p> <p>Note: The documentation links referenced require lauching the application with <code>docker compose</code> or another deployment.</p>"},{"location":"intro/#getting-started","title":"Getting started","text":"<ul> <li>Clone the repository: <code>git clone https://github.com/developmentseed/eoAPI.git</code></li> <li>Navigate to the project: <code>cd eoAPI</code></li> <li>Run services with <code>docker compose up</code></li> <li>Follow the MAXAR open data demo (or get inspired by the other demos) to load some data into eoAPI</li> <li>Checkout the Search Viewer, and the API documentation (STAC Metadata, Raster Tiles, Vector Tiles)</li> </ul> <p>Alternatively, you may launch the application locally: <pre><code>python -m pip install --upgrade virtualenv\nvirtualenv .venv\nsource .venv/bin/activate\n\npython -m pip install \"psycopg[binary,pool]\" uvicorn\npython -m pip install runtime/eoapi/{SERVICE}  # SERVICE should be one of `raster, vector, stac`\n\nexport DATABASE_URL=postgresql://username:password@0.0.0.0:5439/postgis  # Connect to the database of your choice\n\n.venv/bin/uvicorn eoapi.{SERVICE}.app:app --port 8000 --reload\n</code></pre></p> <p>Note: services might have incompatible dependencies which you can resolve by using virtual environement per service</p>"},{"location":"services/","title":"Services","text":"<p>The <code>eoAPI</code> is composed of four services built on top of <code>state-of-the-art</code> projects: pgstac, stac-fastapi, titiler-pgstac and tipg. While those offert a great baseline, we choose to customize them to demo how they could work together, not only be used in parallel.</p>"},{"location":"services/#metadata","title":"Metadata","text":"<p>A custom version of stac-fastapi.pgstac application, adding a <code>TiTilerExtension</code> and a simple <code>Search Viewer</code>.</p> <p>The service includes:</p> <ul> <li> <p>Full stac-fastapi implementation - see docs if using the <code>docker compose</code> configuration.</p> </li> <li> <p>Simple STAC Search viewer - see viewer if using the <code>docker compose</code> configuration.</p> </li> <li> <p>Proxy to the Tiler endpoint for STAC Items</p> </li> </ul> <p>When <code>TITILER_ENDPOINT</code> environement is set (pointing the <code>raster</code> application), additional endpoints will be added to the stac-fastapi application (see: stac/extension.py):</p> <ul> <li><code>/collections/{collectionId}/items/{itemId}/tilejson.json</code>: Return the <code>raster</code> tilejson for an item</li> <li><code>/collections/{collectionId}/items/{itemId}/viewer</code>: Redirect to the <code>raster</code> viewer</li> </ul> <p> <p>STAC Search viewer</p> </p> <p>Code: /runtime/eoapi/stac</p>"},{"location":"services/#raster","title":"Raster","text":"<p>The dynamic tiler deployed within eoAPI is built on top of titiler-pgstac and pgstac. It enables large scale mosaic based on results of STAC searches queries.</p> <p>The service includes:</p> <ul> <li>Full titiler-pgstac implementation</li> </ul> <p> <p>TiTiler-PgSTAC workflow</p> </p> <p>Code: /runtime/eoapi/raster</p>"},{"location":"services/#vector","title":"Vector","text":"<p>OGC Features + Tiles API built on top of tipg.</p> <p>By default, the API will look for tables in the <code>public</code> schema of the database. We've also added three custom functions which connect to the pgSTAC schema.</p> <ul> <li>pg_temp.pgstac_collections_view: Simple function which return PgSTAC Collections</li> <li>pg_temp.pgstac_hash: Return features for a specific searchId (hash)</li> <li>pg_temp.pgstac_hash_count: Return the number of items per geometry for a specific searchId (hash)</li> </ul> <p>Code: /runtime/eoapi/vector</p>"}]}